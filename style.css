/* ??? 구글 폰트 적용방법 */
@import url("https://fonts.googleapis.com/css2?family=Varela+Round&display=swap");

/***** 기본 스타일 시트를 초기화 하는 CSS코드_START *****/
/* !!! 기본 스타일 시트 초기화 CSS코드 */
/* 작성 이유: 웹 브라우저(엣지, 크롬, IE 등)마다 HTML 태그의 기본 CSS 값이 존재한다.
그 기본 값을 초기화 해주기 위해 작성한다. */
* {
  margin: 0;
  padding: 0;
  /* ??? box-sizing 속성 */
  /* box-sizing 속성: 박스모델에서 요소의 전체 너비와 높이를 어떻게 계산하는지 설정한다.
  1. box-sizing: content: content box를 기준으로 크기를 정한다.
  2. box-sizing: border-box: border를 기준으로 크기를 정한다. (디자인하기 유리하여 선호한다.) */
  box-sizing: border-box;
}
/* a: a 태그 전체
a:link: a 태그 방문 전 링크 상태
a:visited: a 태그를 방문한 후 */
/* !!! a 태그 스타일 적용 순서는 아래와 같이 해야된다. 순서 바뀌면 적용 안됨
a:link -> a:visited -> a:hover -> a:active */
a,
a:link,
a:visited {
  /* 글자색: 상속 */
  color: inherit;
  /* 밑줄: 없음 */
  text-decoration: none;
}
li {
  /* list 모양: 없음 */
  list-style: none;
}
/***** 기본 스타일 시트를 초기화 하는 CSS코드_END *****/

/***** 헤더 영역 CSS_START *****/
/* container클래스가 있는 div태그는 기준 너비를 유지하는 역할로 중요한 클래스다.  */
.container {
  width: 1140px;
  margin: 0 auto;
}
header {
  /* ??? 요구사항으로 header는 스크롤을 내려도 상단에 고정시키고 싶다.
  고정을 위해 position: fixde 값을 적용한다. */
  position: fixed;
  /* ??? top 속성: 이격시길 거리
  top, bottom, left, right 속성은 position의 하위 속성으로 position이 적용되어있어야 한다.
  */
  top: 0;
  /* !!! header의 요구사항을 갖추려면 z-index: 1의 값을 가져야 한다.  */
  z-index: 1;
  /* !!! 글 색상은 상속되는 속성으로 부모 태그에 적용하면 하위 태그에도 자동으로 적용된다. */
  color: white;
  /* container클래스의 값을 상속받아 width: 1140px가 된다. */
  width: 100%;
  /* HTML 기본값으로 1rem=16px 이므로, padding: 16px가 된다. */
  padding: 1rem;
}
header .container {
  /* 한 줄로 배치하는데 유리한 flex 사용 */
  display: flex;
  /* !!! justify-content: space-between: 가로축 방향으로 아이템들의 사이에 균일한 간격을 만들어 줍니다. */
  justify-content: space-between;
  /* !!! align-items: center: 수직충 방향으로 아이템들을 가운데로 정렬합니다. */
  align-items: center;
  /* container클래스의 값을 상속받아 width: 1140px가 된다. */
  width: 100%;
}
/* ??? header .container에서 display: flex와 정렬 속성들을 적용했는데, header nav ul에는 flex와 정렬 속성들이 상속이 안되는건지? */
/* 상속되는 속성과 상속이 되지않는 속성
1. 상속되는 속성: font-family, font-size, font-weight, line-height, visibility, opacity, color, line-height, text-align, white-space, list-style
2. 상속되지 않는 속성: margin, padding, border , box-sizing, display, background, vertical-align, text-ecoration, top/right/bottom/left, position, overflow, width/height */
header nav ul {
  display: flex;
}
header nav ul li {
  /* 내부 여백 적용 */
  padding: 10px;
}
header button {
  /* ??? background: transparent: 배경색을 투명하게 적용
  none과 transparent의 차이: background속성은 color image repeat attachment position size 값을 순서대로 받고
  none만 적용할 시 image 값에 적용된다. 이 때, color는 initial 값을 갖는다.
  transparent만 적용할 시 color에 적용된다. */
  background: transparent;
  border: 0;
  cursor: pointer;
}
header h1 button {
  font-size: 2rem;
  /* ??? font-weight: 글자의 굵기를 정하는 속성 */
  font-weight: bold;
  color: white;
}
header nav ul li button {
  font-size: 1.2rem;
  color: white;
}
/***** 헤더 영역 CSS_END *****/

/***** 메인 영역 CSS START *****/
main {
  width: 100%;
  /* ??? vh단위 */
  /* vh단위: vertical height. 뷰포트의 높이값. 비율은 100분의 1이다.
    브라우저 높이값이 1000px일 때 1vh=10px */
  /* vh단위: vertical width. 뷰포트의 너비값. */
  /* 위의 단위들은 반응형 홈페이지에서 자주 쓰이는 단위이다. 100vh로 스크린에 꽉차는 헤드라인을 만들 수 있다. */
  /* ??? 뷰포트란: 사용자 브라우저 창의 크기 */
  height: 100vh;
  color: white;
  /* ??? center center, background 기본 값 배열 */
  /* background-size 단축 속성: color, image, repeat, position/size, origin, clip, attachment
   size는 position 뒤에 /문자로 구분해야 한다.
   background-position: x위치 y위치 */
  /* ??? 축약형이란 속성의 값을 한 줄로 작성하는 것 */
  /* ??? linear-gradient */
  /* linear-gradient 속성: 색상에 그라데이션을 적용하는 속성.
  linear-gradient(방향, 색상1 정지점1, 색상2 정지점2 ... 색상n 정지점n) */
  background: linear-gradient(rgba(0, 0, 0, 0.8), rgba(0, 0, 0, 0.8)),
    url("./images/me.jpg") center center;
  /* !!! background-size:cover */
  /* 1. contain: (안짤림)비율을 유지하면서 요소를 벗어나지 않는 범위에서 최대로 확대
     2. cover: (짤림)배율을 유지하면서 요소 범위까지 width, height 중 작은 값을 가진 쪽을 최대로 확대 */
  background-size: cover;
  display: flex;
  justify-content: center;
  align-items: center;
  /* ??? text-align과 align-items 차이 */
  /* text-align: 텍스트에 적용
     align-items: flex item에 적용 */
  text-align: center;
}
/* !!! h태그 단계적에 비례해 font-size를 적용하지 않아도 된다 */
main h4 {
  font-size: 2rem;
}
main h2 {
  font-size: 3.5rem;
  margin: 2rem 0;
  /* ??? letter-spacing */
  /* letter-spacing: 폰트의 자간 길이.
  한글은 다른 언어와 달리 자간이 긴 편으로 보통 -1px, -2px 설정해주는 것이 좋다. */
  letter-spacing: 3px;
  font-family: "Varela Round", sans-serif;
}
main p {
  /* !!! max-width */
  /* max-width: 요소의 최대 가로 길이.
   p태그에 적용하여 줄 바꿈을 고정시키는 용도로 활용할 수 있다. */
  max-width: 500px;
  margin: 0 auto;
  font-size: 1.25rem;
}
/* ??? 클래스 선택자 사용법으로 태그.클래스는 무슨 의미? 태그 .선택자와 다른 의미? */
/* 태그명.클래스명 선택자: 해당 클래스의 태그에 CSS코드를 적용한다.
동일한 태그를 여러개 사용했지만, 서로 다르게 CSS코드를 적용하고 싶을 때 활용한다. */
main button.download {
  background-color: transparent;
  border: 3px solid white;
  /* !!! border-radius의 정확한 크기 */
  /* border-radius: top-left-x top-right-x bottom-right-x bottom-left-x / top-left-y top-right-y bottom-right-y bottom-left-y */
  border-radius: 20px;
  padding: 1rem 2rem;
  margin-top: 3rem;
  /* ??? color는 상속되는 속성인데, 왜 또 적용했을까? */
  /* 상속이 적용되지 않는 태그: <a>태그와 <button>태그는 상속 */
  color: white;
  font-weight: bold;
  cursor: pointer;
}
main button.mouse {
  background-color: transparent;
  border: none;
  color: white;
  font-size: 2rem;
  /* !!! position: absolute 왜? */
  /* 배치를 편하게 하기 위해서. 기준: class="download"의 inline으로 배치 */
  /* 가운데 정렬의 마법사:
      position: absolute or fixed;
      top:50%; 
      left:50%; -> 시작점을 중앙으로 이동
      transform:translate(-50%,-50%); -> 요소를 (-50% -50%) 이동 */
  position: absolute;
  bottom: 1rem;
  /* ??? 50%의 기준은 무엇인가 */
  /* 부모요소를 기준= class="container"의 width 1140px 50%=570px */
  left: 50%;
  /* ??? transform 속성 */
  /* transform 속성: 요소의 위치는 모습에 변화
    translate: 이동
    scale: 크기 */
  transform: translateX(-50%);
  /* ??? animation 속성 */
  /* animation 단축 속성: name, duration, timing-function, ..., iteration-count, ...
  1. name: 애니메이션의 중간 상태를 지정하기 위한 이름. 중간 상태는 @keyframes 규칙으로 기술
  2. duration: 애니메이션의 싸이클 시간
  3. timing-function: 중간 상태들의 전환의 시간 간격
    3-1. ease: 선형적인 속도
    3-2. ease-in-out: 시작은 빠르게, 마지막은 느리게
  4. iteration-count: 애니메이션 반복 횟수. infinite: 무한반복 */
  animation: upDown 1s ease-in-out infinite;
  cursor: pointer;
}
/* ??? @keyframes의 의미, 기능 */
/* @keyframes: 애니메이션 스타일을 구체적으로 제어
형식: 위치 { 제어할 CSS코드 }  */
@keyframes upDown {
  0% {
    bottom: 1rem;
  }
  50% {
    bottom: 1.5rem;
  }
  100% {
    bottom: 1rem;
  }
}
/* !!! ::after */
main h2 span::after {
  /* ??? content: "" + height&width = 막대기 */
  content: "";
  height: 50px;
  width: 3px;
  background-color: #fff;
  /* ??? display: inline-block과 inline의 차이 */
  /* 1. inline-block: width, height 속성 및 margin, padding 속성 지정이 가능. 배치는 같음
     2. inline: width, height 속성 및 margin, padding 속성 지정이 불가능 */
  display: inline-block;
  animation: blink 0.7s ease-in-out infinite;
}
@keyframes blink {
  0% {
    /* ??? opacity: 요소의 투명도 */
    /* number : 0.0부터 1.0까지의 수를 넣습니다. */
    opacity: 1;
  }
  100% {
    opacity: 0;
  }
}
/***** 메인 영역 CSS END *****/

/***** 섹션 영역 CSS START *****/
/* !!! section 태그에 스타일을 주는 경우 */
/* 여러 개의 section 태그가 존재할 수 있기 때문에 폰트 속성이나 margin, padding 등 기본적인 스타일만 준다.  */
section {
  font-family: "Poppins", sans-serif;
  padding: 5rem 0;
}
section:nth-child(2n) {
  background-color: #f8f8f8;
}
section .title h4 {
  font-size: 1.35rem;
  color: #ed4848;
  /* ??? 굳이 relative? */
  position: relative;
}
section .title h2 {
  font-size: 3.5rem;
}
section .title p {
  font-size: 1.15rem;
}
/* !!! float clear하는 마법사 */
section .about-self::after {
  content: "";
  clear: both;
  display: block;
}
section .about-self .left {
  /* %의 기준: container width=1140px */
  width: 50%;
  float: left;
}
section .about-self .left img {
  /* %의 기준: container width=1140px */
  max-width: 100%;
}
section .about-self .right {
  width: 50%;
  /* 가로 길이를 절반을 적용했기 때문에, left=right이다. */
  float: right;
  padding: 0 2rem;
}
section .about-self .right h3 {
  font-size: 2.25rem;
  margin-bottom: 1rem;
}
section .about-self .right h3 strong {
  color: #ed4848;
}
section .about-self .right p {
  font-size: 1.15rem;
  margin: 1rem 0;
}
section .about-self .right .social a {
  font-size: 2.5rem;
  margin-right: 0.2rem;
}
/***** 섹션 영역 CSS START *****/
